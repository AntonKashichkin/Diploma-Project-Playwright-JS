name: API & E2E Unified Tests

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: npx playwright test --grep "@api" --reporter=allure-playwright --output-dir=allure-results/api
        continue-on-error: true

      - name: Upload API results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-api
          path: allure-results/api

  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npx playwright test --grep "@e2e" --reporter=allure-playwright --output-dir=allure-results/e2e
        continue-on-error: true

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-e2e
          path: allure-results/e2e

  generate-report:
    runs-on: ubuntu-latest
    needs: [api, e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Download API results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-api
          path: allure-results-api

      - name: Download E2E results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-e2e
          path: allure-results-e2e

      # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      - name: Merge results
        run: |
          mkdir -p allure-results
          if [ -d "allure-results-api" ]; then
            cp -r allure-results-api/* allure-results/ 2>/dev/null || true
          fi
          if [ -d "allure-results-e2e" ]; then
            cp -r allure-results-e2e/* allure-results/ 2>/dev/null || true
          fi

      # Setup Allure CLI
      - name: Setup Java & Allure
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install allure-commandline
        run: |
          npm install -g allure-commandline --save-dev
          allure --version

      # Generate unified Allure report
      - name: Generate Allure Report
        run: |
          mkdir -p allure-report
          allure generate allure-results --clean -o allure-report

      # Deploy report to GitHub Pages
      - name: Deploy Allure report
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report
          force_orphan: false

      # Allure TestOps integration
      - name: Install Allurectl
        run: |
          DOWNLOAD_URL=$(curl -s https://api.github.com/repos/allure-framework/allurectl/releases/latest \
            | jq -r '.assets[] | select(.name | test("linux_amd64")) | .browser_download_url')
          echo "Downloading allurectl from $DOWNLOAD_URL"
          curl -sLo allurectl "$DOWNLOAD_URL"
          chmod +x allurectl
          sudo mv allurectl /usr/local/bin/
          allurectl --version

      - name: Create Allure TestOps launch
        id: create_launch
        run: |
          LAUNCH_ID=$(allurectl launch create \
            --launch-name "Tests - Build #${{ github.run_number }}" \
            --launch-tags "ci,github-actions" \
            --project-id ${{ secrets.ALLURE_PROJECT_ID }} \
            --endpoint ${{ secrets.ALLURE_ENDPOINT }} \
            --token ${{ secrets.ALLURE_TOKEN }} \
            --no-header \
            -o json | jq -r '.[0].id')
          echo "LAUNCH_ID=$LAUNCH_ID" >> $GITHUB_ENV

      - name: Upload results to Allure TestOps
        run: |
          allurectl upload allure-results \
            --launch-id $LAUNCH_ID \
            --project-id ${{ secrets.ALLURE_PROJECT_ID }} \
            --endpoint ${{ secrets.ALLURE_ENDPOINT }} \
            --token ${{ secrets.ALLURE_TOKEN }}

      # Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
      - name: Debug file structure
        run: |
          echo "=== Checking file structure ==="
          find . -name "*.json" -type f | head -20
          echo "=== Allure results directory ==="
          ls -la allure-results/ || echo "No allure-results directory"
          echo "=== Allure report directory ==="
          ls -la allure-report/ || echo "No allure-report directory"
          echo "=== Looking for summary files ==="
          find . -name "*summary*" -type f

      # Telegram notification —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
      - name: Send Telegram notification
        if: always()
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.html"
          RUN_DATE=$(date +"%Y-%m-%d %H:%M:%S")

          # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          api_PASSED="0"; api_FAILED="0"; api_BROKEN="0"; api_SKIPPED="0"; api_DURATION="0"
          e2e_PASSED="0"; e2e_FAILED="0"; e2e_BROKEN="0"; e2e_SKIPPED="0"; e2e_DURATION="0"

          # –ò—â–µ–º summary.json –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
          POSSIBLE_PATHS=(
            "allure-report/widgets/summary.json"
            "allure-results/widgets/summary.json"
            "allure-results-api/widgets/summary.json"
            "allure-results-e2e/widgets/summary.json"
          )

          echo "Searching for summary files..."
          for path in "${POSSIBLE_PATHS[@]}"; do
            if [ -f "$path" ]; then
              echo "Found summary file: $path"
              cat "$path"
            fi
          done

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π summary —Ñ–∞–π–ª
          if [ -f "allure-report/widgets/summary.json" ]; then
            echo "Using main summary file"
            PASSED=$(jq -r '.statistic.passed // 0' "allure-report/widgets/summary.json")
            FAILED=$(jq -r '.statistic.failed // 0' "allure-report/widgets/summary.json")
            BROKEN=$(jq -r '.statistic.broken // 0' "allure-report/widgets/summary.json")
            SKIPPED=$(jq -r '.statistic.skipped // 0' "allure-report/widgets/summary.json")
            DURATION=$(jq -r '.time.duration // 0' "allure-report/widgets/summary.json")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
            api_PASSED=$PASSED; api_FAILED=$FAILED; api_BROKEN=$BROKEN; api_SKIPPED=$SKIPPED; api_DURATION=$DURATION
            e2e_PASSED=$PASSED; e2e_FAILED=$FAILED; e2e_BROKEN=$BROKEN; e2e_SKIPPED=$SKIPPED; e2e_DURATION=$DURATION
          fi

          # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          TOTAL_TESTS=$(find allure-results* -name "*.json" -type f | grep -E "(result|container)" | wc -l)
          
          MESSAGE="üì¢ *Tests completed*\n\n"
          MESSAGE+="üóì Date: ${RUN_DATE}\n"
          MESSAGE+="üìä Total test files: ${TOTAL_TESTS}\n\n"
          MESSAGE+="*Combined Results:*\n‚úÖ Passed: ${api_PASSED}\n‚ùå Failed: ${api_FAILED}\nüí• Broken: ${api_BROKEN}\n‚ö™ Skipped: ${api_SKIPPED}\n‚è± Duration: ${api_DURATION} ms\n\n"
          MESSAGE+="üîó *Allure Report:* ${REPORT_URL}"

          curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"${TG_CHAT_ID}\",\"text\":\"${MESSAGE}\",\"parse_mode\":\"Markdown\"}" \
            https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage