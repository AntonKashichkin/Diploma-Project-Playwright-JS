name: API & E2E Unified Tests

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: |
          mkdir -p allure-results
          npx playwright test --grep "@api"
        continue-on-error: true

      - name: Upload API results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-api
          path: allure-results/
          if-no-files-found: warn

  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create allure-results directory
        run: mkdir -p allure-results

      - name: Run E2E tests
        run: npx playwright test --grep "@e2e"
        continue-on-error: true

      - name: Debug E2E results
        run: |
          echo "=== Checking E2E results ==="
          ls -la . || true
          ls -la allure-results/ || echo "No allure-results directory"
          find . -name "*.json" -type f | grep -v node_modules | head -10 || echo "No JSON files found"

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-e2e
          path: allure-results/
          if-no-files-found: warn

  generate-report:
    runs-on: ubuntu-latest
    needs: [api, e2e]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Download API results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: allure-results-api
          path: downloaded-api-results

      - name: Download E2E results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: allure-results-e2e
          path: downloaded-e2e-results

      # Merge results and create separate reports
      - name: Prepare results
        run: |
          mkdir -p allure-results allure-results-api-only allure-results-e2e-only
          
          # Copy API results
          if [ -d "downloaded-api-results" ] && [ "$(ls -A downloaded-api-results)" ]; then
            cp -r downloaded-api-results/* allure-results/ 2>/dev/null || true
            cp -r downloaded-api-results/* allure-results-api-only/ 2>/dev/null || true
          fi
          
          # Copy E2E results
          if [ -d "downloaded-e2e-results" ] && [ "$(ls -A downloaded-e2e-results)" ]; then
            cp -r downloaded-e2e-results/* allure-results/ 2>/dev/null || true
            cp -r downloaded-e2e-results/* allure-results-e2e-only/ 2>/dev/null || true
          fi

      # Setup Allure CLI
      - name: Setup Java & Allure
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install allure-commandline
        run: |
          npm install -g allure-commandline --save-dev
          allure --version

      # Generate unified Allure report and separate reports for statistics
      - name: Generate Allure Reports
        run: |
          mkdir -p allure-report allure-report-api allure-report-e2e
          
          # Generate combined report
          if [ "$(ls -A allure-results)" ]; then
            allure generate allure-results --clean -o allure-report
          fi
          
          # Generate API-only report
          if [ "$(ls -A allure-results-api-only)" ]; then
            allure generate allure-results-api-only --clean -o allure-report-api
          fi
          
          # Generate E2E-only report
          if [ "$(ls -A allure-results-e2e-only)" ]; then
            allure generate allure-results-e2e-only --clean -o allure-report-e2e
          fi

      # Deploy report to GitHub Pages
      - name: Deploy Allure report
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report
          force_orphan: false

      # Allure TestOps integration (only if results exist)
      - name: Install Allurectl
        if: hashFiles('allure-results/*.json') != ''
        run: |
          DOWNLOAD_URL=$(curl -s https://api.github.com/repos/allure-framework/allurectl/releases/latest \
            | jq -r '.assets[] | select(.name | test("linux_amd64")) | .browser_download_url')
          echo "Downloading allurectl from $DOWNLOAD_URL"
          curl -sLo allurectl "$DOWNLOAD_URL"
          chmod +x allurectl
          sudo mv allurectl /usr/local/bin/
          allurectl --version

      - name: Create Allure TestOps launch
        if: hashFiles('allure-results/*.json') != ''
        id: create_launch
        run: |
          LAUNCH_ID=$(allurectl launch create \
            --launch-name "Tests - Build #${{ github.run_number }}" \
            --launch-tags "ci,github-actions" \
            --project-id ${{ secrets.ALLURE_PROJECT_ID }} \
            --endpoint ${{ secrets.ALLURE_ENDPOINT }} \
            --token ${{ secrets.ALLURE_TOKEN }} \
            --no-header \
            -o json | jq -r '.[0].id')
          echo "LAUNCH_ID=$LAUNCH_ID" >> $GITHUB_ENV

      - name: Upload results to Allure TestOps
        if: hashFiles('allure-results/*.json') != '' && env.LAUNCH_ID != ''
        run: |
          allurectl upload allure-results \
            --launch-id $LAUNCH_ID \
            --project-id ${{ secrets.ALLURE_PROJECT_ID }} \
            --endpoint ${{ secrets.ALLURE_ENDPOINT }} \
            --token ${{ secrets.ALLURE_TOKEN }}

      # Telegram notification with separate API and E2E stats
      - name: Send Telegram notification
        if: always()
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.html"
          RUN_DATE=$(date +"%Y-%m-%d %H:%M:%S")

          # Function to get statistics from summary.json
          get_stats() {
            local summary_file="$1"
            if [ -f "$summary_file" ]; then
              echo "$(jq -r '.statistic.passed // 0' "$summary_file")|$(jq -r '.statistic.failed // 0' "$summary_file")|$(jq -r '.statistic.broken // 0' "$summary_file")|$(jq -r '.statistic.skipped // 0' "$summary_file")|$(jq -r '.time.duration // 0' "$summary_file")"
            else
              echo "0|0|0|0|0"
            fi
          }

          # Get API statistics
          API_STATS=$(get_stats "allure-report-api/widgets/summary.json")
          IFS='|' read -r API_PASSED API_FAILED API_BROKEN API_SKIPPED API_DURATION <<< "$API_STATS"

          # Get E2E statistics
          E2E_STATS=$(get_stats "allure-report-e2e/widgets/summary.json")
          IFS='|' read -r E2E_PASSED E2E_FAILED E2E_BROKEN E2E_SKIPPED E2E_DURATION <<< "$E2E_STATS"

          # Count files as fallback
          API_FILES=$(find allure-results-api-only -name "*-result.json" -type f 2>/dev/null | wc -l || echo "0")
          E2E_FILES=$(find allure-results-e2e-only -name "*-result.json" -type f 2>/dev/null | wc -l || echo "0")
          TOTAL_FILES=$((API_FILES + E2E_FILES))

          # Determine overall status
          TOTAL_FAILED=$((API_FAILED + E2E_FAILED))
          TOTAL_BROKEN=$((API_BROKEN + E2E_BROKEN))
          TOTAL_PASSED=$((API_PASSED + E2E_PASSED))

          if [ "$TOTAL_FAILED" -gt "0" ] || [ "$TOTAL_BROKEN" -gt "0" ]; then
            STATUS="‚ùå FAILED"
          elif [ "$TOTAL_PASSED" -gt "0" ]; then
            STATUS="‚úÖ PASSED"
          else
            STATUS="‚ö†Ô∏è NO TESTS"
          fi

          # Function to format test status
          format_test_status() {
            local passed=$1 failed=$2 broken=$3
            if [ "$failed" -gt "0" ] || [ "$broken" -gt "0" ]; then
              echo "‚ùå"
            elif [ "$passed" -gt "0" ]; then
              echo "‚úÖ"
            else
              echo "‚ö™"
            fi
          }

          API_STATUS=$(format_test_status "$API_PASSED" "$API_FAILED" "$API_BROKEN")
          E2E_STATUS=$(format_test_status "$E2E_PASSED" "$E2E_FAILED" "$E2E_BROKEN")

          MESSAGE="üì¢ *Tests completed* ${STATUS}\n\n"
          MESSAGE+="üóì Date: ${RUN_DATE}\n"
          MESSAGE+="üìä Total test files: ${TOTAL_FILES} (API: ${API_FILES}, E2E: ${E2E_FILES})\n\n"
          
          MESSAGE+="*${API_STATUS} API Tests:*\n"
          MESSAGE+="‚úÖ Passed: ${API_PASSED}\n"
          MESSAGE+="‚ùå Failed: ${API_FAILED}\n"
          MESSAGE+="üí• Broken: ${API_BROKEN}\n"
          MESSAGE+="‚ö™ Skipped: ${API_SKIPPED}\n"
          MESSAGE+="‚è± Duration: ${API_DURATION} ms\n\n"
          
          MESSAGE+="*${E2E_STATUS} E2E Tests:*\n"
          MESSAGE+="‚úÖ Passed: ${E2E_PASSED}\n"
          MESSAGE+="‚ùå Failed: ${E2E_FAILED}\n"
          MESSAGE+="üí• Broken: ${E2E_BROKEN}\n"
          MESSAGE+="‚ö™ Skipped: ${E2E_SKIPPED}\n"
          MESSAGE+="‚è± Duration: ${E2E_DURATION} ms\n\n"
          
          MESSAGE+="üîó *Allure Report:* ${REPORT_URL}"

          curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"${TG_CHAT_ID}\",\"text\":\"${MESSAGE}\",\"parse_mode\":\"Markdown\"}" \
            https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage