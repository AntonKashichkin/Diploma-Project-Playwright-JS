name: API & E2E Unified Tests

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Create allure-results directory
        run: mkdir -p allure-results

      - name: Run API tests
        run: npx playwright test --grep "@api"
        continue-on-error: true

      - name: Debug API results
        run: |
          echo "=== Checking API results ==="
          ls -la . || true
          ls -la allure-results/ || echo "No allure-results directory"
          find . -name "*.json" -type f | grep -v node_modules | head -10 || echo "No JSON files found"

      - name: Upload API results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-api
          path: allure-results/
          if-no-files-found: warn

  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create allure-results directory
        run: mkdir -p allure-results

      - name: Run E2E tests
        run: npx playwright test --grep "@e2e"
        continue-on-error: true

      - name: Debug E2E results
        run: |
          echo "=== Checking E2E results ==="
          ls -la . || true
          ls -la allure-results/ || echo "No allure-results directory"
          find . -name "*.json" -type f | grep -v node_modules | head -10 || echo "No JSON files found"

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-e2e
          path: allure-results/
          if-no-files-found: warn

  generate-report:
    runs-on: ubuntu-latest
    needs: [api, e2e]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Download API results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: allure-results-api
          path: downloaded-api-results

      - name: Download E2E results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: allure-results-e2e
          path: downloaded-e2e-results

      - name: Debug downloaded artifacts
        run: |
          echo "=== Checking downloaded artifacts ==="
          ls -la . || true
          ls -la downloaded-api-results/ || echo "No API results downloaded"
          ls -la downloaded-e2e-results/ || echo "No E2E results downloaded"

      # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      - name: Merge results
        run: |
          mkdir -p allure-results
          
          # –ö–æ–ø–∏—Ä—É–µ–º API —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
          if [ -d "downloaded-api-results" ] && [ "$(ls -A downloaded-api-results)" ]; then
            echo "Copying API results..."
            cp -r downloaded-api-results/* allure-results/ 2>/dev/null || true
          fi
          
          # –ö–æ–ø–∏—Ä—É–µ–º E2E —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
          if [ -d "downloaded-e2e-results" ] && [ "$(ls -A downloaded-e2e-results)" ]; then
            echo "Copying E2E results..."
            cp -r downloaded-e2e-results/* allure-results/ 2>/dev/null || true
          fi
          
          echo "=== Final allure-results content ==="
          ls -la allure-results/ || echo "Empty allure-results"

      # Setup Allure CLI
      - name: Setup Java & Allure
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install allure-commandline
        run: |
          npm install -g allure-commandline --save-dev
          allure --version

      # Generate unified Allure report
      - name: Generate Allure Report
        run: |
          mkdir -p allure-report
          if [ "$(ls -A allure-results)" ]; then
            allure generate allure-results --clean -o allure-report
          else
            echo "No test results found, creating empty report"
            echo "<html><body><h1>No test results found</h1></body></html>" > allure-report/index.html
          fi

      # Deploy report to GitHub Pages
      - name: Deploy Allure report
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report
          force_orphan: false

      # Allure TestOps integration (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
      - name: Install Allurectl
        if: hashFiles('allure-results/*.json') != ''
        run: |
          DOWNLOAD_URL=$(curl -s https://api.github.com/repos/allure-framework/allurectl/releases/latest \
            | jq -r '.assets[] | select(.name | test("linux_amd64")) | .browser_download_url')
          echo "Downloading allurectl from $DOWNLOAD_URL"
          curl -sLo allurectl "$DOWNLOAD_URL"
          chmod +x allurectl
          sudo mv allurectl /usr/local/bin/
          allurectl --version

      - name: Create Allure TestOps launch
        if: hashFiles('allure-results/*.json') != ''
        id: create_launch
        run: |
          LAUNCH_ID=$(allurectl launch create \
            --launch-name "Tests - Build #${{ github.run_number }}" \
            --launch-tags "ci,github-actions" \
            --project-id ${{ secrets.ALLURE_PROJECT_ID }} \
            --endpoint ${{ secrets.ALLURE_ENDPOINT }} \
            --token ${{ secrets.ALLURE_TOKEN }} \
            --no-header \
            -o json | jq -r '.[0].id')
          echo "LAUNCH_ID=$LAUNCH_ID" >> $GITHUB_ENV

      - name: Upload results to Allure TestOps
        if: hashFiles('allure-results/*.json') != '' && env.LAUNCH_ID != ''
        run: |
          allurectl upload allure-results \
            --launch-id $LAUNCH_ID \
            --project-id ${{ secrets.ALLURE_PROJECT_ID }} \
            --endpoint ${{ secrets.ALLURE_ENDPOINT }} \
            --token ${{ secrets.ALLURE_TOKEN }}

      # Telegram notification
      - name: Send Telegram notification
        if: always()
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.html"
          RUN_DATE=$(date +"%Y-%m-%d %H:%M:%S")

          # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          PASSED="0"; FAILED="0"; BROKEN="0"; SKIPPED="0"; DURATION="0"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º summary —Ñ–∞–π–ª –≤ –æ—Ç—á–µ—Ç–µ
          if [ -f "allure-report/widgets/summary.json" ]; then
            echo "Found summary file, parsing..."
            PASSED=$(jq -r '.statistic.passed // 0' "allure-report/widgets/summary.json")
            FAILED=$(jq -r '.statistic.failed // 0' "allure-report/widgets/summary.json")
            BROKEN=$(jq -r '.statistic.broken // 0' "allure-report/widgets/summary.json")
            SKIPPED=$(jq -r '.statistic.skipped // 0' "allure-report/widgets/summary.json")
            DURATION=$(jq -r '.time.duration // 0' "allure-report/widgets/summary.json")
          fi

          # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∫ fallback
          RESULT_FILES=$(find allure-results -name "*-result.json" -type f 2>/dev/null | wc -l || echo "0")
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
          if [ "$FAILED" -gt "0" ] || [ "$BROKEN" -gt "0" ]; then
            STATUS="‚ùå FAILED"
          elif [ "$PASSED" -gt "0" ]; then
            STATUS="‚úÖ PASSED"
          else
            STATUS="‚ö†Ô∏è NO TESTS"
          fi

          MESSAGE="üì¢ *Tests completed* ${STATUS}\n\n"
          MESSAGE+="üóì Date: ${RUN_DATE}\n"
          MESSAGE+="üìä Result files found: ${RESULT_FILES}\n\n"
          MESSAGE+="*Test Results:*\n"
          MESSAGE+="‚úÖ Passed: ${PASSED}\n"
          MESSAGE+="‚ùå Failed: ${FAILED}\n"
          MESSAGE+="üí• Broken: ${BROKEN}\n"
          MESSAGE+="‚ö™ Skipped: ${SKIPPED}\n"
          MESSAGE+="‚è± Duration: ${DURATION} ms\n\n"
          MESSAGE+="üîó *Allure Report:* ${REPORT_URL}"

          curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"${TG_CHAT_ID}\",\"text\":\"${MESSAGE}\",\"parse_mode\":\"Markdown\"}" \
            https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage