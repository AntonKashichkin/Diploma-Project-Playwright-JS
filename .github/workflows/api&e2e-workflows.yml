name: Unified API & E2E Tests

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  api:
    name: API Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: npx playwright test --grep "@api" --output=allure-results
        continue-on-error: true

      - name: Install Allure CLI
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install allure-commandline
        run: |
          npm install -g allure-commandline --save-dev
          allure --version

      - name: Upload API results to TestOps
        run: |
          DOWNLOAD_URL=$(curl -s https://api.github.com/repos/allure-framework/allurectl/releases/latest \
            | grep browser_download_url | grep linux_amd64 | cut -d '"' -f 4)
          curl -sLo allurectl "$DOWNLOAD_URL"
          chmod +x allurectl
          sudo mv allurectl /usr/local/bin/
          allurectl --version

          LAUNCH_ID=$(allurectl launch create \
            --launch-name "API Tests - Build #${{ github.run_number }}" \
            --launch-tags "api,ci,github-actions" \
            --project-id ${{ secrets.ALLURE_PROJECT_ID }} \
            --endpoint ${{ secrets.ALLURE_ENDPOINT }} \
            --token ${{ secrets.ALLURE_TOKEN }} \
            --no-header -o json | jq -r '.[0].id')
          echo "API_LAUNCH_ID=$LAUNCH_ID" >> $GITHUB_ENV

          allurectl upload allure-results \
            --launch-id $LAUNCH_ID \
            --project-id ${{ secrets.ALLURE_PROJECT_ID }} \
            --endpoint ${{ secrets.ALLURE_ENDPOINT }} \
            --token ${{ secrets.ALLURE_TOKEN }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-api
          path: allure-results

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: []

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npx playwright test --grep "@e2e" --output=allure-results
        continue-on-error: true

      - name: Install Allure CLI
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install allure-commandline
        run: |
          npm install -g allure-commandline --save-dev
          allure --version

      - name: Upload E2E results to TestOps
        run: |
          DOWNLOAD_URL=$(curl -s https://api.github.com/repos/allure-framework/allurectl/releases/latest \
            | grep browser_download_url | grep linux_amd64 | cut -d '"' -f 4)
          curl -sLo allurectl "$DOWNLOAD_URL"
          chmod +x allurectl
          sudo mv allurectl /usr/local/bin/
          allurectl --version

          LAUNCH_ID=$(allurectl launch create \
            --launch-name "E2E Tests - Build #${{ github.run_number }}" \
            --launch-tags "e2e,ci,github-actions" \
            --project-id ${{ secrets.ALLURE_PROJECT_ID }} \
            --endpoint ${{ secrets.ALLURE_ENDPOINT }} \
            --token ${{ secrets.ALLURE_TOKEN }} \
            --no-header -o json | jq -r '.[0].id')
          echo "E2E_LAUNCH_ID=$LAUNCH_ID" >> $GITHUB_ENV

          allurectl upload allure-results \
            --launch-id $LAUNCH_ID \
            --project-id ${{ secrets.ALLURE_PROJECT_ID }} \
            --endpoint ${{ secrets.ALLURE_ENDPOINT }} \
            --token ${{ secrets.ALLURE_TOKEN }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-e2e
          path: allure-results

  report:
    name: Generate & Deploy Allure Report
    runs-on: ubuntu-latest
    needs: [api, e2e]

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: allure-results-api
          path: allure-results
      - uses: actions/download-artifact@v4
        with:
          name: allure-results-e2e
          path: allure-results

      - name: Install Allure CLI
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install allure-commandline
        run: |
          npm install -g allure-commandline --save-dev
          allure --version

      - name: Generate unified Allure report
        run: |
          allure generate allure-results --clean -o allure-report

      - name: Deploy Allure report to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report

      - name: Send unified Telegram notification
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.html"
          RUN_DATE=$(date +"%Y-%m-%d %H:%M:%S")

          for TYPE in api e2e; do
            SUMMARY_FILE="allure-results/$TYPE/widgets/summary.json"
            if [ -f "$SUMMARY_FILE" ]; then
              PASSED=$(jq '.statistic.passed' "$SUMMARY_FILE")
              FAILED=$(jq '.statistic.failed' "$SUMMARY_FILE")
              BROKEN=$(jq '.statistic.broken' "$SUMMARY_FILE")
              SKIPPED=$(jq '.statistic.skipped' "$SUMMARY_FILE")
              DURATION=$(jq '.time.duration' "$SUMMARY_FILE")
            else
              PASSED="?"; FAILED="?"; BROKEN="?"; SKIPPED="?"; DURATION="?";
            fi
            eval "${TYPE}_PASSED=$PASSED"
            eval "${TYPE}_FAILED=$FAILED"
            eval "${TYPE}_BROKEN=$BROKEN"
            eval "${TYPE}_SKIPPED=$SKIPPED"
            eval "${TYPE}_DURATION=$DURATION"
          done

          MESSAGE="üì¢ *Tests completed*\n\n"
          MESSAGE+="üóì Date: ${RUN_DATE}\n\n"
          MESSAGE+="*API Tests:*\n‚úÖ Passed: $api_PASSED\n‚ùå Failed: $api_FAILED\nüí• Broken: $api_BROKEN\n‚ö™Ô∏è Skipped: $api_SKIPPED\n‚è± Duration: $api_DURATION ms\n\n"
          MESSAGE+="*E2E Tests:*\n‚úÖ Passed: $e2e_PASSED\n‚ùå Failed: $e2e_FAILED\nüí• Broken: $e2e_BROKEN\n‚ö™Ô∏è Skipped: $e2e_SKIPPED\n‚è± Duration: $e2e_DURATION ms\n\n"
          MESSAGE+="üîó *Allure Report:* ${REPORT_URL}"

          curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"${TG_CHAT_ID}\",\"text\":\"${MESSAGE}\",\"parse_mode\":\"Markdown\"}" \
            https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage
